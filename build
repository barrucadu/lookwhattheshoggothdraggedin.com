#!/usr/bin/env python3

"""build

Usage:
  build [--out=<dir>] [--root=<url>]
  build (-h | --help)

Options:
  -h --help       Show this screen.
  --out=<dir>     Directory to generate site in [default: _site]
  --root=<url>    Root of the website [default: https://www.lookwhattheshoggothdraggedin.com/]
"""

import datetime
import jinja2
import json
import os
import sys
import yaml

from distutils import dir_util
from docopt import docopt
from markdown import markdown

args = docopt(__doc__)
OUT_DIR = args["--out"]
BASE_HREF = args["--root"]

NUM_RECENT = 5

JINJA2_ENV = jinja2.Environment(loader=jinja2.FileSystemLoader("_templates"))

TOPICS = {
    "gm-advice": "GM Advice",
    "mechanics": "Mechanics",
    "review": "Review",
}

SYSTEMS = {
    "call-of-cthulhu": "Call of Cthulhu",
    "troika": "Troika!",
}


def read_files_from(fdir, permalink_base_href=BASE_HREF):
    out = []
    for fname in os.listdir(fdir):
        fpath = os.path.join(fdir, fname)
        if not os.path.isfile(fpath):
            continue

        with open(fpath, "r") as f:
            lines = f.readlines()
            idx = lines[1:].index("---\n") + 1
            metadata = yaml.load("".join(lines[1:idx]), Loader=yaml.SafeLoader)
            metadata["text"] = "".join(lines[idx + 1:])
            metadata["body"] = markdown(metadata["text"], output_format="html5")
            if "slug" not in metadata:
                metadata["slug"], _ = os.path.splitext(fname)
            metadata["permalink"] = f"{permalink_base_href}{metadata['slug']}.html"
            out.append(metadata)
    return out


ALL_PAGES = read_files_from("pages")

ALL_POSTS = sorted(
    read_files_from("posts", permalink_base_href=f"{BASE_HREF}post/"),
    key=lambda post: post["date"],
    reverse=True
)

for post in ALL_POSTS:
    if post.get("topic") not in TOPICS:
        print(f"{post.slug} has invalid topic.")
        sys.exit(1)
    if post.get("system") is not None and post["system"] not in SYSTEMS:
        print(f"{post.slug} has invalid system.")
        sys.exit(1)

    post["year"] = post["date"].strftime("%Y")
    post["month"] = post["date"].strftime("%b")
    post["day"] = post["date"].strftime("%-d")
    post["atom_date"] = post["date"].strftime("%Y-%m-%dT%H:%M:%S%z")

YEARS = { post["year"]: post["year"] for post in ALL_POSTS }

dir_util.copy_tree("static", OUT_DIR)
dir_util.mkpath(os.path.join(OUT_DIR, "post"))
dir_util.mkpath(os.path.join(OUT_DIR, "system"))
dir_util.mkpath(os.path.join(OUT_DIR, "topic"))
dir_util.mkpath(os.path.join(OUT_DIR, "year"))


def render(link, template, **metadata):
    permalink = f"{BASE_HREF}{link}"
    link_back = template == "page.html"
    link_to_all_posts = link != "all.html" and not link_back

    with open(os.path.join(OUT_DIR, link), "w") as f:
        rendered = JINJA2_ENV.get_template(template).render(
            base_href=BASE_HREF,
            topics=TOPICS,
            systems=SYSTEMS,
            years=YEARS,
            permalink=permalink,
            link_to_all_posts=link_to_all_posts,
            link_back=link_back,
            **metadata,
        )
        print(rendered, file=f)


def render_json_feed(link, title, posts):
    with open(os.path.join(OUT_DIR, link), "w") as f:
        feed = {
            "version": "https://jsonfeed.org/version/1.1",
            "title": title,
            "home_page_url": BASE_HREF,
            "feed_url": f"{BASE_HREF}{link}",
            "authors": [
                {
                    "name": "Michael Walker",
                    "email": "mike@barrucadu.co.uk",
                },
            ],
            "items": [
                {
                    "id": post["permalink"],
                    "url": post["permalink"],
                    "content_text": post["excerpt"],
                    "date_published": post["date"].strftime("%Y-%m-%dT%H:%M:%S%z"),
                }
                for post in posts
            ]
        }

        json.dump(feed, f)


def render_feeds_for(link_without_format, title, posts):
    render(
        link_without_format + ".xml",
        "atom.xml",
        title=title,
        posts=posts[:NUM_RECENT],
    )
    render_json_feed(
        link_without_format + ".json",
        title=title,
        posts=posts[:NUM_RECENT],
    )


render(
    "index.html",
    "index.html",
    title="Recent Posts",
    posts=ALL_POSTS[:NUM_RECENT],
)

render(
    "all.html",
    "archive.html",
    title="All Posts",
    posts=ALL_POSTS,
)

render_feeds_for("feed", "Recent Posts", ALL_POSTS)

for field, entries in [("topic", TOPICS), ("system", SYSTEMS), ("year", YEARS)]:
    for slug, name in entries.items():
        matching_posts = [post for post in ALL_POSTS if post.get(field) == slug]

        render(
            f"{field}/{slug}.html",
            "archive.html",
            title=name,
            posts=matching_posts,
        )

        render_feeds_for(f"{field}/{slug}", name, matching_posts)

for post in ALL_POSTS:
    render(
        f"post/{post['slug']}.html",
        "post.html",
        title=post["title"],
        post=post
    )

for page in ALL_PAGES:
    render(
        f"{page['slug']}.html",
        "page.html",
        title=page["title"],
        page=page,
    )
